from naoqi import ALProxy
import nao_2_1_1 as nao
def wave():
    # Choregraphe bezier export in Python.
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-0.19656, [3, -0.333333, 0], [3, 1.38667, 0]], [-0.19656, [3, -1.38667, 0], [3, 0.413333, 0]], [-0.196561, [3, -0.413333, 0], [3, 0.346667, 0]], [-0.196561, [3, -0.346667, 0], [3, 1.73333, 0]], [-0.196561, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[0.00377895, [3, -0.333333, 0], [3, 1.38667, 0]], [0.00377895, [3, -1.38667, 0], [3, 0.413333, 0]], [0.00377895, [3, -0.413333, 0], [3, 0.346667, 0]], [0.00377895, [3, -0.346667, 0], [3, 1.73333, 0]], [0.00377895, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("HipPitch")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-0.0357291, [3, -0.333333, 0], [3, 1.38667, 0]], [-0.0357291, [3, -1.38667, 0], [3, 0.413333, 0]], [-0.035729, [3, -0.413333, 0], [3, 0.346667, 0]], [-0.035729, [3, -0.346667, 0], [3, 1.73333, 0]], [-0.035729, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("HipRoll")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-3.50037e-07, [3, -0.333333, 0], [3, 1.38667, 0]], [-3.50037e-07, [3, -1.38667, 0], [3, 0.413333, 0]], [-3.50038e-07, [3, -0.413333, 0], [3, 0.346667, 0]], [-3.50038e-07, [3, -0.346667, 0], [3, 1.73333, 0]], [-3.50038e-07, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("KneePitch")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-0.0110562, [3, -0.333333, 0], [3, 1.38667, 0]], [-0.0110562, [3, -1.38667, 0], [3, 0.413333, 0]], [-0.0110562, [3, -0.413333, 0], [3, 0.346667, 0]], [-0.0110562, [3, -0.346667, 0], [3, 1.73333, 0]], [-0.0110562, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-0.52117, [3, -0.333333, 0], [3, 1.38667, 0]], [-0.52117, [3, -1.38667, 0], [3, 0.413333, 0]], [-0.521169, [3, -0.413333, 0], [3, 0.346667, 0]], [-0.521169, [3, -0.346667, 0], [3, 1.73333, 0]], [-0.521169, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-1.23068, [3, -0.333333, 0], [3, 1.38667, 0]], [-1.23068, [3, -1.38667, 0], [3, 0.413333, 0]], [-1.23068, [3, -0.413333, 0], [3, 0.346667, 0]], [-1.23068, [3, -0.346667, 0], [3, 1.73333, 0]], [-1.23068, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[0.607254, [3, -0.333333, 0], [3, 1.38667, 0]], [0.607254, [3, -1.38667, 0], [3, 0.413333, 0]], [0.607254, [3, -0.413333, 0], [3, 0.346667, 0]], [0.607254, [3, -0.346667, 0], [3, 1.73333, 0]], [0.607254, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[1.55592, [3, -0.333333, 0], [3, 1.38667, 0]], [1.55592, [3, -1.38667, 0], [3, 0.413333, 0]], [1.55592, [3, -0.413333, 0], [3, 0.346667, 0]], [1.55592, [3, -0.346667, 0], [3, 1.73333, 0]], [1.55592, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[0.149812, [3, -0.333333, 0], [3, 1.38667, 0]], [0.149812, [3, -1.38667, 0], [3, 0.413333, 0]], [0.149812, [3, -0.413333, 0], [3, 0.346667, 0]], [0.149812, [3, -0.346667, 0], [3, 1.73333, 0]], [0.149812, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.96, 5.12, 6.36, 7.4, 12.6])
    keys.append([[-0.0066933, [3, -0.333333, 0], [3, 1.38667, 0]], [-0.0066933, [3, -1.38667, 0], [3, 0.413333, 0]], [-0.0066933, [3, -0.413333, 0], [3, 0.346667, 0]], [-0.0066933, [3, -0.346667, 0], [3, 1.73333, 0]], [-0.0066933, [3, -1.73333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.96, 3.96, 5.12, 6.36, 7.4, 8.96, 12.6])
    keys.append([[0.521984, [3, -0.333333, 0], [3, 1, 0]], [0.598648, [3, -1, -0.0766641], [3, 0.386667, 0.0296434]], [1.48036, [3, -0.386667, 0], [3, 0.413333, 0]], [1.11003, [3, -0.413333, 0], [3, 0.346667, 0]], [1.48036, [3, -0.346667, 0], [3, 0.52, 0]], [0.598648, [3, -0.52, 0.0328558], [3, 1.21333, -0.0766636]], [0.521984, [3, -1.21333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.96, 3.96, 5.12, 6.36, 7.4, 8.96, 12.6])
    keys.append([[1.23065, [3, -0.333333, 0], [3, 1, 0]], [1.88845, [3, -1, -0.000116743], [3, 0.386667, 4.51406e-05]], [1.88849, [3, -0.386667, -6.8512e-06], [3, 0.413333, 7.32369e-06]], [1.8885, [3, -0.413333, 0], [3, 0.346667, 0]], [1.8885, [3, -0.346667, 0], [3, 0.52, 0]], [1.88845, [3, -0.52, 5.24643e-05], [3, 1.21333, -0.000122417]], [1.23065, [3, -1.21333, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.96, 3.96, 5.12, 6.36, 7.4, 8.96, 12.6])
    keys.append([[0.607361, [3, -0.333333, 0], [3, 1, 0]], [0.89, [3, -1, 0], [3, 0.386667, 0]], [0.889251, [3, -0.386667, 0], [3, 0.413333, 0]], [0.889251, [3, -0.413333, 0], [3, 0.346667, 0]], [0.889251, [3, -0.346667, 0], [3, 0.52, 0]], [0.89, [3, -0.52, 0], [3, 1.21333, 0]], [0.607361, [3, -1.21333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.96, 3.96, 5.12, 6.36, 7.4, 8.96, 12.6])
    keys.append([[1.55596, [3, -0.333333, 0], [3, 1, 0]], [0.584685, [3, -1, 0.000615052], [3, 0.386667, -0.00023782]], [0.584448, [3, -0.386667, 0], [3, 0.413333, 0]], [0.584448, [3, -0.413333, 0], [3, 0.346667, 0]], [0.584448, [3, -0.346667, 0], [3, 0.52, 0]], [0.584685, [3, -0.52, -0.000237354], [3, 1.21333, 0.000553827]], [1.55596, [3, -1.21333, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.96, 3.96, 5.12, 6.36, 7.4, 8.96, 12.6])
    keys.append([[-0.147883, [3, -0.333333, 0], [3, 1, 0]], [-1.23569, [3, -1, 0.000645013], [3, 0.386667, -0.000249405]], [-1.23594, [3, -0.386667, 1.24567e-07], [3, 0.413333, -1.33158e-07]], [-1.23594, [3, -0.413333, 0], [3, 0.346667, 0]], [-1.23594, [3, -0.346667, 0], [3, 0.52, 0]], [-1.23569, [3, -0.52, -0.000249538], [3, 1.21333, 0.000582256]], [-0.147883, [3, -1.21333, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.96, 3.96, 5.12, 6.36, 7.4, 8.96, 12.6])
    keys.append([[0.00664003, [3, -0.333333, 0], [3, 1, 0]], [0.219911, [3, -1, -0.00193181], [3, 0.386667, 0.000746967]], [0.220658, [3, -0.386667, -3.11418e-08], [3, 0.413333, 3.32895e-08]], [0.220658, [3, -0.413333, 0], [3, 0.346667, 0]], [0.220658, [3, -0.346667, 0], [3, 0.52, 0]], [0.219911, [3, -0.52, 0.000747], [3, 1.21333, -0.001743]], [0.00664004, [3, -1.21333, 0], [3, 0, 0]]])

    try:
    # uncomment the following line and modify the IP if you use this script outside Choregraphe.
    # motion = ALProxy("ALMotion", IP, 9559)
        motion = ALProxy("ALMotion", "192.168.0.119", 9559)
        motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
        print err

def join_turn(ip, port):

    # Choregraphe bezier export in Python.
    from naoqi import ALProxy
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-0.208622, [3, -0.333333, 0], [3, 0.32, 0]], [-0.197884, [3, -0.32, 0], [3, 0.253333, 0]], [-0.197884, [3, -0.253333, 0], [3, 0.333333, 0]], [-0.197884, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.00613594, [3, -0.333333, 0], [3, 0.32, 0]], [-0.00460196, [3, -0.32, 0], [3, 0.253333, 0]], [-0.00460196, [3, -0.253333, 0], [3, 0.333333, 0]], [-0.00460196, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("HipPitch")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-0.0306797, [3, -0.333333, 0], [3, 0.32, 0]], [-0.0306797, [3, -0.32, 0], [3, 0.253333, 0]], [-0.0306797, [3, -0.253333, 0], [3, 0.333333, 0]], [-0.0306797, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("HipRoll")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-0.0184078, [3, -0.333333, 0], [3, 0.32, 0]], [-0.00306797, [3, -0.32, 0], [3, 0.253333, 0]], [-0.00306797, [3, -0.253333, 0], [3, 0.333333, 0]], [-0.00306797, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("KneePitch")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.00766993, [3, -0.333333, 0], [3, 0.32, 0]], [-0.00613594, [3, -0.32, 0], [3, 0.253333, 0]], [-0.00613594, [3, -0.253333, 0], [3, 0.333333, 0]], [-0.00613594, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-0.523088, [3, -0.333333, 0], [3, 0.32, 0]], [-0.523088, [3, -0.32, 0], [3, 0.253333, 0]], [-0.523088, [3, -0.253333, 0], [3, 0.333333, 0]], [-0.523088, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-1.22872, [3, -0.333333, 0], [3, 0.32, 0]], [-1.22872, [3, -0.32, 0], [3, 0.253333, 0]], [-1.22872, [3, -0.253333, 0], [3, 0.333333, 0]], [-1.22872, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.599297, [3, -0.333333, 0], [3, 0.32, 0]], [0.599297, [3, -0.32, 0], [3, 0.253333, 0]], [0.599297, [3, -0.253333, 0], [3, 0.333333, 0]], [0.599297, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[1.56006, [3, -0.333333, 0], [3, 0.32, 0]], [1.56006, [3, -0.32, 0], [3, 0.253333, 0]], [1.56006, [3, -0.253333, 0], [3, 0.333333, 0]], [1.56006, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.145728, [3, -0.333333, 0], [3, 0.32, 0]], [0.145728, [3, -0.32, 0], [3, 0.253333, 0]], [0.145728, [3, -0.253333, 0], [3, 0.333333, 0]], [0.145728, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.0122299, [3, -0.333333, 0], [3, 0.32, 0]], [0.0122299, [3, -0.32, 0], [3, 0.253333, 0]], [0.0122299, [3, -0.253333, 0], [3, 0.333333, 0]], [0.0122299, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.516952, [3, -0.333333, 0], [3, 0.32, 0]], [0.394233, [3, -0.32, 0], [3, 0.253333, 0]], [0.658078, [3, -0.253333, 0], [3, 0.333333, 0]], [0.549165, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[1.22258, [3, -0.333333, 0], [3, 0.32, 0]], [1.24559, [3, -0.32, 0], [3, 0.253333, 0]], [0.754719, [3, -0.253333, 0], [3, 0.333333, 0]], [0.754719, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[0.59051, [3, -0.333333, 0], [3, 0.32, 0]], [0.59051, [3, -0.32, 0], [3, 0.253333, 0]], [0.59051, [3, -0.253333, 0], [3, 0.333333, 0]], [0.59051, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[1.55852, [3, -0.333333, 0], [3, 0.32, 0]], [0.898913, [3, -0.32, 0], [3, 0.253333, 0]], [0.92499, [3, -0.253333, -0.0260777], [3, 0.333333, 0.0343128]], [1.32383, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-0.14266, [3, -0.333333, 0], [3, 0.32, 0]], [-0.685689, [3, -0.32, 0], [3, 0.253333, 0]], [-0.274583, [3, -0.253333, -0.0746305], [3, 0.333333, 0.098198]], [-0.167204, [3, -0.333333, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([0.96, 1.92, 2.68, 3.68])
    keys.append([[-0.0107799, [3, -0.333333, 0], [3, 0.32, 0]], [0.7869, [3, -0.32, 0], [3, 0.253333, 0]], [0.688724, [3, -0.253333, 0.098176], [3, 0.333333, -0.129179]], [0.00302601, [3, -0.333333, 0], [3, 0, 0]]])

    try:
    # uncomment the following line and modify the IP if you use this script outside Choregraphe.
    # motion = ALProxy("ALMotion", IP, 9559)
        motion = ALProxy("ALMotion", ip, port)
        motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
        print err
